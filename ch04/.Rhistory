nlevels(sex)
levels(sex)
levels(sex)[1]
levels(sex)[2]
levels(sex) <- c("male", "female")
sex
ordered(c("b","a","d","c"))
factor(c("b","a","d","c"), ordered = TRUE)
x <- c (1 , 2 , 3 , 4 , 5)
x
x1 <- c (1 , 2 , 3 , 4 , 5)
x1
x2 <- c("kim", "lee", "park", "choi", "kwon")
x2
x3 <- c(90, 70, 90, 80, 50, 70, 40, 80)
x3
x3 <- c(90, 70, 90, 80, c(50, 70, 40, 80))
x3
x4 <- 21:40
x4
x5 <- seq(5, 30, 3)
x5
x6 <- seq_along(c("shilla","gaya","baikjae","goguryoe"))
x6
seq_len(3)
seq_len(4)
x7 <- seq_len(4)
x7
# 벡터에 이름을 지정
x8 <- c(95,100,85,90)
names(x8) <- c("park","kim","lee","choi")
x8
# 벡터에서 특정 요소의 접근
x8[2]
x8[-2]
x8[c(1,2)]
x8[c(1:3)]
x8["kim"]
x8[c("kim","choi")]
# 벡터에서 요소의 수 출력
length(x8)
nrow(x8)
NROW(x8)
# 벡터 연산
# %in% 연산자 : 특정 값이 벡터에 존재하는 확인
"kim" %in% x8
# 벡터 연산
# %in% 연산자 : 특정 값이 벡터에 존재하는 확인
90 %in% x8
"lee" %in% x8
union(st1, st2)
# 합집합 연산
st1 <- c("a" , "b" , "c" )
st2 <- c("d" , "a" , "f" )
union(st1, st2)
# 교집합 연산
inter
# 교집합 연산
interaction(st1, st2)
# 교집합 연산
intersection(st1, st2)
# 교집합 연산
intersect(st1, st2)
# 차집합 연산
setdiff(st1, st2)
st3 <- c("a" , "b" , "c", "f")
# 집합간 비교
setequal(st1, st2)
setequal(st1, st3)
setequal(st3, st1)
st3 <- c("a" , "b" , "c", "b")
setequal(st1, st3)
st3 <- c("a" , "b" , "c", "b", "a")
# 집합간 비교
setequal(st1, st2)
setequal(st1, st3)
# 요소의 반복
rep(12:19, 3)
# 요소의 반복
x9 <- rep(12:19, 3)
x9
# 요소의 반복
x9 <- rep(12:16, 3)
x9
# 요소의 반복
x9 <- rep(12:15, 3)
x9
x10 <- rep(12:15, each=3)
x10
x1 <- list(name = "kim", height = 174, weight = 71)
x1
$name
x1$name
x1$height
x1$weight
x2 <- list(a = list (val = c(1,2,3)), b = list(val=c(1,2,3,4)))
x2
x2$a
x2$b
x2$a[2]
x2$a[1]
x2$a[1]
x2$val
x2$a$val
x2$b$val
x2[[1]]
x2[[2]]
x2[1]
x2[2]
x2[1][2]
x2[1:2]
x2[1,2]
m1 = matrix(c(1,2,3,4,5,6,7,8,9), nrow=3)
m1
m1 = matrix(c(1,2,3,4,5,6,7,8,9), nrow=4)
m1
m2 = matrix(c(1,2,3,4,5,6,7,8,9), ncol=4)
m2
m3 = matrix(c(1,2,3,4,5,6,7,8,9), nrow=2, byrow=T)
m3
# 행과 열에 이름을 부여
m4 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, dimnames=list(c("item1","item2","item3"), c("feature1","feature2","feature3")))
m4
# 행렬 내 요소의 접근
m4[1,]
m4[,1]
m4[-1]
m4[1]
m4[1,2]
m4[1:2,1:2]
m4[1:3,2]
m4[1:2,2]
m4[1:2,1:2]
m4["feature2"]
m4["feature2",]
m4[,"feature2"]
m4["item2",]
m4["item2",1]
m4[,"feature2",3]
m4["item2",1]
m4[3,"feature2"]
# 행렬의 연산
m5 <- matrix(1:9, nrow=3)
m5*2
m5/2
m5+m5
m5-m5
m5%*%m5
# 역행렬
solve(m5)
# 행렬의 연산
m5 <- matrix(1:9, nrow=3)
# 역행렬
solve(m5)
# 행렬의 연산
m5 <- matrix(1:9, ncol=4, nrow=3)
m5*2
m5/2
m5+m5
m5-m5
m5%*%m5             # 행렬곱
# 행렬의 연산
m5 <- matrix(1:9, ncol=4, nrow=3)
m5%*%m5             # 행렬곱
# 행렬의 연산
m5 <- matrix(1:9, ncol=3, nrow=3)
m5*2
m5/2
m5+m5
m5-m5
m5%*%m5             # 행렬곱
# 역행렬
solve(m5)
# 역행렬
m6 <- solve(m5)
# 역행렬
# 행렬식 계산
det_m5 <- det(m5)
# 행렬식이 0인지(특이행렬) 확인
if (det_m5 == 0) {
print("이 행렬은 특이행렬입니다. 역행렬이 존재하지 않습니다.") } else {
inverse_m5 <- solve(m5)
print("역행렬:")
print(inverse_m5)
}
m5 <- matrix(c(1,2,3,2,4,6,3,6,9), nrow=3, ncol=3)
# 역행렬 : solve()
# 행렬식 계산
det_m5 <- det(m5)
# 행렬식이 0인지(특이행렬) 확인
if (det_m5 == 0) {
print("이 행렬은 특이행렬입니다. 역행렬이 존재하지 않습니다.") } else {
inverse_m5 <- solve(m5)
print("역행렬:")
print(inverse_m5)
}
m5 <- matrix(c(3,2,3,2,4,6,4,6,9), nrow=3, ncol=3)
# 행렬식이 0인지(특이행렬) 확인
if (det_m5 == 0) {
print("이 행렬은 특이행렬입니다. 역행렬이 존재하지 않습니다.") } else {
inverse_m5 <- solve(m5)
print("역행렬:")
print(inverse_m5)
}
# 일반화 역행렬 계산
pseudo_inverse_m5 <- ginv(m5)
library(MASS)
# 일반화 역행렬 계산
pseudo_inverse_m5 <- ginv(m5)
print("일반화 역행렬:")
print(pseudo_inverse_m5)
# 전치 행렬 : t()
t_m5 <- t(m5)
t_m5
# 행렬의 요소의 수
length(m5)
ncol(m5)
nrow(m5)
m1 <- matrix(1:12, ncol=4)
m1
a1 <- array(1:12, dim=c(3, 4))
a1
m2 <- matrix(1:12, dim=c(2,2,3))
a2 <- array(1:12, dim=c(2,2,3))
a2
,,1
a2[,,1]
a2[,,2]
# 요소의 접근
a2[,,1]
a2[1,,]
a2[,1,]
a2[1,2,]
a2[1,,2]
a2
a2 <- array(1:12, dim=c(2,3,4))
a2 <- array(1:24, dim=c(2,3,4))
a2
a2[2,1,3]
a2[1,,3]
d <- data.frame(x=c(1,2,3,4,5), y=c(2,4,6,8,10))
d1 <- data.frame(x=c(1,2,3,4,5), y=c(2,4,6,8,10))
d1
View(d1)
d2 <- data.frame(x=c(1,2,3,4,5), y=c(2,4,6,8,10), z=c("M","F","M","F","M"))
d2
View(d2)
# 새로운 데이터 추가
d2$v <- c(3,6,9,12,15)
d2
# 데이터 프레임 요소의 접근
d$x
# 데이터 프레임 요소의 접근
d2$x
d2[1,2]
source("D:/kim2/rLang_basic/ch04/ex06.r")
d2[-1, -c(2,3)]
d2[c(1,3), 2]
d[, c("x","y")]
d2[, c("x","y")]
d2[, c("x"), drop=FALSE]
d2
str(d2)
d3 <- data.frame(x=1:120)
head(d3)
colnames(d3) <- c("val")
d3
head(d3)
names(d3) <- c("element")
head(d3)
d4 <- data.frame(1:3)
d4
colnames(d4) <- c("value")
rownames(d4) <- c("one","two","three")
d4
d5 <- data.frame(a=1:3, b=4:6, c=7:9)
d5
d5[, names(d5) %in% c("b","c")]
d5
d6 <- d5[, names(d5) %in% c("b","c")]
d6
d7<-d5[, !names(d5) %in% c("a")]
d7
d5
# 타입 판별
class(c(1,2,3))
class(matrix(c(1,2,3)))
class(list(c(1,2,3)))
class(array(c(1,2,3)))
class(data.frame(x=c(1,2,3)))
str(c(1,2,3))
str(matrix(c(1,2,3)))
str(array(c(1,2,3)))
str(list(c(1,2,3)))
str(data.frame(x=c(1,2,3)))
class(c(1:10))
# 타입 판별
class(c(1,2,3))
class(matrix(1:10))
class(array(1:10))
class(data.frame(1:10))
# 타입 확인
is.numeric(c(1,2,3))
is.numeric(c("a","b","c"))
is.character(c(1,2,3))
is.character(c("a","b","c"))
is.matrix(matrix(c(1,2,3)))
is.array(array(c(1,2,3)))
is.list(list(c(1,2,3)))
is.data.frame(data.frame(x=c(1,2,3)))
x <- data.frame(matrix(c(1,2,3,4,5,6), ncol=2))
d <- data.frame(matrix(c(1,2,3,4,5,6), ncol=2))
colnames(d) <- c("X","Y")
d
l <- list(x=c(1,2,3),y=c(4,5,6))
d2 <- data.frame(l)
d2
l
d3 <- as.data.frame(l)
d3
v = c(1,2,3,4,5,6)
# 벡터를 리스트로 변환
v <- c(1,2,3,4,5,6)
l2 <- list(v, ncol=2)
l2
l2 <- list(v, nrow=2, ncol=3)
l2
l2 <- list(v)
l2
is.list(l2)
v2 <- c(l2)
is.factor(v2)
v2 <- c(l2)
is.factor(v2)
v2
is.vector(v2)
# 벡터를 행렬로 변환
a2 <- matrix(v)
a2
# 벡터를 행렬로 변환
a2 <- matrix(v, ncol=2)
a2
# 중첩 리스트
x2 <- list(a = list(val = c(1,2,3)), b = list(val=c(1,2,3,4)))
x2
is.matrix(a2)
# 행렬을 리스트로 변환
l3 <- list(a2)
l3
is.list(l3)
# 행렬을 벡터로 변환
v3 <- vector(a2)
v3
# 행렬을 벡터로 변환
v3 <- vector(a2)
v3
# 행렬을 벡터로 변환
v3 <- c(a2)
v3
# Factor를 리스트로 변환
v <- c(1,2,3,4,5,6)
l1 <- list(v)
l1
is.list(l2)
# Factor를 행렬로 변환
m1 <- matrix(v, ncol=2)
m1
is.matrix(m1)
# Factor를 배열로 변환
a1 <- array(v, dim=length(3))
a1
# Factor를 배열로 변환
a1 <- array(v, dim = c(2, 3))
a1
is.list(l1)
is.array(a1)
is.list(l1)
# Factor를 데이터 프레임으로 변환
d1 <- data.frame(matrix(v, nrow=3, ncol=2))
d1
is.data.frame(d1)
m <- matrix(1:12, nrow=4, ncol=3)
# 행렬(matrix)를 Factor로 변환
v2 <- c(m)
v2
is.vector(v2)
# 행렬(matrix)를 배열(array)로 변환
a2 <- array(m, dim=c(3,4))
a2
is.array(a2)
# 중첩 리스트
x2 <- list(a = list(val = c(1,2,3)), b = list(val=c(1,2,3,4)))
x2
m <- matrix(1:12, nrow=4, ncol=3)
m
# 행렬(matrix)를 리스트(list)로 변환
l2 <- list(a=m[,1], b=m[,2], c=m[,3], d=m[,4])
# 행렬(matrix)를 리스트(list)로 변환
l2 <- list(a=m[,1], b=m[,2], c=m[,3])
l2
is.list(l2)
# 행렬(matrix)를 데이터 프레임으로 변환
d2 <- data.frame(m)
d2
is.data.frame(d2)
a <- array(1:24, dim=c(2,3,4))
a
# Array(배열)을 벡터(Vector=Factor)로 변환
v3 <- c(a)
v3
is.vector(v3)
# Array(배열)을 행렬(matrix)로 변환
m3 <- matrix(a, nrow=4, ncol=6)
m3
is.matrix(m3)
# Array(배열)을 리스트(list)로 변환
l3 <- list(a, nrow=6)
l3
is.list(l3)
# Array(배열)을 데이터 프레임으로 변환
d3 <- data.frame(matrix(a, ncol=4))
d3
is.data.frame(d3)
l = list(x=c(1,2,3),y=c(4,5,6),z=c(7,8,9))
l
# 리스트(list)를 벡터(Vector)로 변환
v4 <- vector(l)
# 리스트(list)를 벡터(Vector)로 변환
v4 <- c(l)
v4
# 리스트(list)를 벡터(Vector)로 변환
v4 <- unlist(l)
v4
is.vector(v4)
# 리스트(list)를 행렬(matrix)로 변환
m4 <- matrix(l, nrow=3)
m4
# 리스트(list)를 행렬(matrix)로 변환
m4 <- matrix(l, nrow=3, ncol=3)
m4
is.matrix(m4)
# 리스트(list)를 Array(배열)로 변환
a4 <- list(l)
a4
is.list(a4)
# 리스트(list)를 데이터 프레임으로 변환
d4 <- data.frame(l)
d4
is.data.frame(d4)
df <- data.frame(1:20, row.names = c("kim","lee","park","choi"))
df <- data.frame(1:20, row.names = c("kim","lee","park","choi"), nrow=4)
matrix_data <- matrix(1:20, nrow = 4, ncol = 5)
df <- data.frame(matrix_data, row.names = c("kim", "lee", "park", "choi"))
source("D:/kim2/rLang_basic/ch04/ex08.r")
# 데이터 프레임을 벡터(Vector)로 변환
v5 <- c(df)
v5
# 데이터 프레임을 벡터(Vector)로 변환
v5 <- unlist(df)
v5
is.vector(v5)
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- matrix(df)
m5
is.matrix(m5)
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- matrix(df, nrow=5, ncol=4)
m5
df
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- matrix(df, nrow=4, ncol=5)
m5
df
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- matrix(df[-1], nrow=4, ncol=5)
m5
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- matrix(df[,2:5], nrow=4, ncol=5)
m5
# 데이터 프레임을 행렬(matrix)로 변환
m5 <- as.matrix(df, nrow=4, ncol=5)
m5
is.matrix(m5)
# 리스트(list)를 행렬(matrix)로 변환
m4 <- matrix(l, nrow=3, ncol=3)
m4
# 리스트(list)를 행렬(matrix)로 변환
m4 <- as.matrix(l, nrow=3, ncol=3)
m4
is.matrix(m4)
# 리스트(list)를 행렬(matrix)로 변환
m4 <- do.call(cbind, l)
m4
is.matrix(m4)
# Array(배열)을 행렬(matrix)로 변환
m3 <- matrix(a, nrow=4, ncol=6)
m3
is.matrix(m3)
# 데이터 프레임을 Array(배열)로 변환
a5 <- array(df, dim=c(5,4))
a5
# 데이터 프레임을 Array(배열)로 변환
a5 <- as.array(df)
a5
# 데이터 프레임을 Array(배열)로 변환
a5 <- as.array(as.matrix(df))
a5
# 데이터 프레임을 리스트(list)로 변환
l5 <- list(df)
l5
is.array(a5)
is.list(l5)
