matrix(sample(1:10,8), 4, 2)
matrix(rnorm(8), nrow=2, ncol=4)
# 데이터프레임 열의 개수  length는 데이터프레임 열의 개수 혹은 벡터의 길이를 세는 함수
length(pf)
ncol(pf)
# 데이터프레임 행의 개수
length(pf$id)
nrow(pf)
#데이터 프레임에서 특정 열만 선택하기
pf[,5]
pf$height
my_list <- list(name = "Alice", age = 30, scores = c(95, 88, 76))
print(my_list)
# 이름 요소 접근
print(my_list$name)  # "Alice"
# 나이 요소 접근
print(my_list[["age"]])  # 30
# 리스트 요소 추가 및 수정
# 새로운 요소 추가
my_list$city <- "New York"
# 기존 요소 수정
my_list$age <- 31
print(my_list)
# 리스트의 길이
length(my_list)  # 4
# 모든 요소에 대해 길이 출력
lapply(my_list, function(x) length(x))
# 리스트 변환
# 리스트를 벡터로 변환
my_list_flat <- unlist(my_list)
print(my_list_flat)
# 리스트의 각 요소가 데이터 프레임의 열을 나타내는 경우
df <- as.data.frame(my_list)
students <- list(
student1 = list(name = "John", age = 22, grades = c(88, 92, 85)),
student2 = list(name = "Jane", age = 21, grades = c(91, 84, 89))
)
# 각 학생의 평균 성적 계산
average_grades <- lapply(students, function(student) {
mean(student$grades)
})
print(average_grades)
# 리스트를 데이터 프레임으로 변환
students_df <- do.call(rbind, lapply(students, as.data.frame))
print(students_df)
a<-c(1,2,3,4,5,6)
mean(a)
sd(a)
var(a)
max(a)
min(a)
median(a)
a<-c(3,3,4,4,5,5,6,6,11)
quantile(a)
quantile(a,0.25)
quantile(a,0.5)
quantile(a,0.75)
IQR(a)
IQR(a)
library(dplyr)
boxplot(a)
# 밀도 추정
density_a <- density(a)
# 그래프 그리기
plot(density_a, main = "Kernel Density Estimation", xlab = "Value", ylab = "Density", type = "l")
# 자극적인 스무딩 (Smoothing Spline)
# 데이터
a <- c(3, 3, 4, 4, 5, 5, 6, 6, 11)
# 스무딩 스플라인 적용
spline_fit <- smooth.spline(x, a)
# 그래프 그리기
plot(x, a, main = "Smoothing Spline", xlab = "Index", ylab = "Value", pch = 16)
lines(spline_fit, col = "blue")
# 스무딩 스플라인 적용
spline_fit <- smooth.spline(x, a)
a<-read.csv("students2.csv")
a
a$std
# 학생 개인별 평균은? 석차는?
a[,2]
# 학생 개인별 평균은? 석차는?
a[,6]
a[,8]
# 각 과목별 학급 평균은?
kor<-mean(a[,2])
# 각 과목별 학급 평균은?
kor<-mean(a[,2])
math<-mean(a[,3])
eng<-mean(a[,4])
sci<-mean(a[,5])
ave=c(kor, math, eng, sci)
ave=c(kor, math, eng, sci)
ave
part=c("kor", "math", "eng", "sci")
dat1<-matrix(ave,part)
avg=c(kor, math, eng, sci)
part=c("kor", "math", "eng", "sci")
b<-read.csv("mts.csv")
b
#총 몇 개의
length(b)
#총 몇 개의
nrow(b)
ncol(b)
#총 몇 개의
print("행의 개수 : "+nrow(b))
#총 몇 개의
print("행의 개수 : ", nrow(b))
#총 몇 개의
print("행의 개수 : {}", nrow(b))
print("항목의 수 : "+ncol(b))
print("항목의 수 : ", ncol(b))
#일반함수 aggregate
aggregate(mpg ~ cyl, mts, mean)
mts<-read.csv("mts.csv")
mts
#일반함수 aggregate
aggregate(mpg ~ cyl, mts, mean)
mts["cyl"]
# 브랜드별 mpg 평균 내고, 내림차순으로 정리?
# dplyr 사용하기
gr_br <- group_by(mts,Brand)
summarise(gr_br,mean(mpg))
mts %>% group_by(Brand) %>% summarise(mean(mpg)) ->gr_br
colnames(gr_br)[2]<-"MPG“
mpgbr<-arrange(gr_br,desc(MPG))
colnames(gr_br)[2]<-"MPG“
colnames(gr_br)[2]<-"MPG“
mpgbr<-arrange(gr_br,desc(MPG))
# 범주형 자료 개수 집계
table(mts$Brand)
#혹은 dplyr 패키지 활용
mts %>% group_by(Brand) %>% summarise(n())
#혹은 같은dplyr 패키지 내  count()함수
count(mts,Brand)
# gear, cyl별 개수는?
# distinct()함수? 중복제거하고 유니크한 값
distinct(mts,Brand,cyl)
colnames(gr_br)[2]<-"MPG"
mpgbr<-arrange(gr_br,desc(MPG))
# 범주형 자료 개수 집계
table(mts$Brand)
#혹은 dplyr 패키지 활용
mts %>% group_by(Brand) %>% summarise(n())
#혹은 같은dplyr 패키지 내  count()함수
count(mts,Brand)
# distinct()함수? 중복제거하고 유니크한 값
distinct(mts,Brand,cyl)
# 연간소득
# 연간소득의 평균, 중앙값, 그룹별(남/여별 또는 직급별), 사분위수,요약,빈도,최빈값
rr1 <- read.csv("r_stat.csv")
rr1 <- read.csv("r_stat.csv", fileEncoding="EUC-KR")
mean(rr1$연간소득)
#NA(결측치) 제거하기 na.omit()함수 사용하기
x1 <- na.omit(rr1$연간소득)
mean(x1); median(x1); max(x1); min(x1)
quantile(x1)
aggregate(연간소득 ~ 성별1, rr1, mean)
x1
rr1
aggregate(연간소득 ~ 성별1, rr1, mean)
View(rr1)
names(rr1)
View(x1)
mean(x1); median(x1); max(x1); min(x1)
is.na(rr1$연간소득)
length(is.na(rr1$연간소득))
sum(is.na(rr1$연간소득))
x2 <- subset(rr1$연간소득, 연간소득>0)
x2
x2 <- subset(rr1$연간소득, 연간소득>0)
x2 <- subset(rr1, 연간소득>0)
x2
nrow(x2)
sum(is.na(rr1$연간소득))  # NA 데이터 건수
nrow(rr1)-nrow(x2)
nrow(x1)
#NA(결측치) 제거하기 na.omit()함수 사용하기
x1 <- na.omit(rr1$연간소득)
nrow(x1)
x3 <- subset(rr1, !is.na(연간소득))
x3
nrow(x2)
nrow(x3)
nrow(x1)
rr1 <- read.csv("r_stat.csv", fileEncoding="EUC-KR")
# NA(결측치) 제거하기 na.omit()함수 사용하기
x1 <- na.omit(rr1$연간소득)
nrow(x1)
View(x1)
table(x2$성별1)
# summary 함수로 보기
summary(x1)
summary(rr1)
# 빈도수 및 최빈값
table(x1)
salf <- table(x1)
salf <- as.data.frame(salf)
salf <- salf[order(salf$Freq,decreasing=T),]
salf
stds <- read.csv("students2.csv")
head(stds)
x <- stds$std
y <- stds$ave
plot(x, y, main="중간고사분석", sub="정정 예정", xlab="x축이름", ylab="y축이름")
plot(stds$std, stds$ave, main="중간고사분석", sub="정정 예정", xlab="x축이름", ylab="y축이름")
plot(x, y, main="중간고사분석", sub="정정 예정", xlab="x축이름", ylab="y축이름", pch=16, col="blue")
plot(x, y, main="중간고사평균", sub="성적 정정 예정", xlab="x축이름", ylab="y축이름", ylim=c(0,100), type="S")
boxplot
# boxplot
x <- c(2,5,6,5,7,9,11,5,7,9,13,15,17)
boxplot(x)
z <- c(3.5, 2.2, 1.5, 4.6, 6.9)
boxplot(x, z)
stds <- read.csv("students2.csv")
head(stds)
a <- stds$kor
b <- stds$eng
c <- stds$sci
boxplot(a, b, c)
# 또는
boxplot(stds$kor, stds$eng, stds$sci)
par(mfrow=c(1,2))
boxplot(stds$kor, stds$eng, stds$sci)
boxplot(stds$kor, stds$eng, stds$sci, main="중간고사결과", names=c("kor","eng","sci"))
# barplot
stds <- read.csv("students2.csv")
head(stds)
par(mfrow=c(1,1))
barplot(stds$ave)
barplot(stds$ave, ylim=c(0,100))
sort1 <- sort(stds$ave, decreasing=T)
barplot(sort1, ylim=c(0,100))
barplot(stds3$ave, names.arg=stds3$std, ylim=c(0,100), horiz=FALSE)
barplot(stds3$ave, main="성적", names.arg=stds3$std, las=2, cex.main=2, cex.names=0.8, cex.axis=0.8, ylim=c(0,100))
stds3 <- read.csv("students3.csv")
barplot(stds3$ave, names.arg=stds3$std, ylim=c(0,100), horiz=FALSE)
barplot(stds3$ave, main="성적", names.arg=stds3$std, las=2, cex.main=2, cex.names=0.8, cex.axis=0.8, ylim=c(0,100))
stds <- read.csv("students2.csv")
head(stds)
#breaks는 히스토그램 막대가 구분되는 지점을 지정하는 것
#아래의 경우는 6개 내외의 구간으로 구분하라는 것
hist(stds$ave, breaks=2)
hist(stds$ave, breaks=4)
hist(stds$ave, breaks=6)
#아래 경우는 해당 수치를 기준으로 나누라는 것
hist(stds$ave, breaks=c(30,40,50,60,70,80,90,100,110))
hist(stds$ave, breaks=c(40,80,90,100))
hist(stds$ave, breaks=seq(40,100, by=5))
hist(stds$ave,
main="중간고사 평균점수 분포도",
xlab="점수",
xlim=c(40,100),
ylab="Frequency",
ylim=c(0,17),
col="magenta",
breaks=seq(40,100,5))
curve(x^3,-10,10)
curve(x^3,-10,10, xlim=c(-10,10), ylim=c(-1200,1500), main="Test", sub="Test",
xlab="엑스삼승", ylab="엑스")
# 파이 그래프
x <- c(2,5,6,5,7,9,11,5,7,9,13,15,17)
pie(x)
x <- c(2,5,6,5,7,9,11,5,7,9,13,15,17)
y <- c(1,2,3,4,5,6,7,8,9,10,11,12,13)
par(mfrow=c(1,1))
plot(x,y, main="플롯그리기연습", sub="2021년2학기 연습자료", xlab="X축변수", ylab="Y축변수", type="p")
points(10,6, pch=10, cex=4, col="red")
stds <- read.csv("students2.csv")
head(stds)
par(mfrow=c(1,3))
boxplot(stds$kor, stds$eng, stds$sci, main="중간고사결과", names=c("kor","eng","sci"))
km <- mean(stds$kor)
em <- mean(stds$eng)
sm <- mean(stds$sci)
points(c(1,2,3), c(km,em,sm), pch=16, col="red")
stds <- read.csv("students2.csv")
head(stds)
par(mfrow=c(1,1))
plot(stds$std, stds$ave, pch=1)
lines(stds$ave, col="red",lwd=1, lty=3)
# abline : 수평선, 수직선 넣기
x <- c(2,5,6,5,7,9,11,5,7,9,13,15,17)
y <- c(1,2,3,4,5,6,7,8,9,10,11,12,13)
par(mfrow=c(1,1))
plot(x,y, main="플롯그리기연습", sub="2021년2학기 연습자료", xlab="X축변수", ylab="Y축변수", type="p")
points(8,7, pch=4, cex=2, col="red")
abline(h=7, v=8, lty=3)
# 미리 정렬해 둔 파일 students3 읽어들이기
stds3 <- read.csv("students3.csv")
# ave로 barplot 그리기
par(mfrow=c(1,1))
barplot(stds3$ave, names.arg=stds3$std,ylim=c(0,100))
# 평균선 그려주기
colav <- mean(stds3$ave)
colav
abline(h=colav, lty=2, col="red", lwd=1)
# text : 그래프에 글자를 넣음
# 기본형태 : text(x, y, "글자", col= "red")
stds <- read.csv("students2.csv")
head(stds)
par(mfrow=c(1,1))
hist(stds$ave,
main="중간고사 평균점수 분포도",
xlab="점수",
xlim=c(40,100),
ylab="Frequency",
ylim=c(0,17),
col="magenta",
breaks=seq(40,100,5))
h <- hist(stds$ave,
main="중간고사 평균점수 분포도",
xlab="점수",
xlim=c(40,100),
ylab="Frequency",
ylim=c(0,17),
col="gray",
breaks=seq(40,100,5))
h
text(h$mids,h$counts,labels=h$counts, adj=c(0.5,-0.5))
stds <- read.csv("students2.csv")
head(stds)
par(mfrow=c(1,2))
boxplot(stds$kor, stds$eng, stds$sci, main="중간고사결과", names=c("Kor","Eng","Sci"), las=1, cex.axis=1.5, cex.main=2)
km <- mean(stds$kor)
em <- mean(stds$eng)
sm <- mean(stds$sci)
points(c(1,2,3), c(km,em,sm), pch=16, col="red")
#소수점 2자리까지만 표시
k <- round(km, digits=2)
e <- round(em, digits=2)
s <- round(sm, digits=2)
text(c(1,2,3), c(k,e,s), c(k,e,s), adj=c(0.5,1.5), col="red", cex=1.5)
# 미리 정렬해 둔 파일 students3 읽어들이기
stds3 <- read.csv("students3.csv")
# ave로 barplot 그리기
par(mfrow=c(1,1))
barplot(stds3$ave, names.arg=stds3$std,ylim=c(0,100))
# 평균선 그려주기
colav <- mean(stds3$ave)
colav
abline(h=colav, lty=2, col="red", lwd=1)
# 평균값 텍스트로 넣어주기(소수점 2자리)
colav2 <- round(colav, digits=2)
colav2
text(60,80,colav2, col="red", cex=0.8)
# 범례 legend
# 자료 입력
apple = c(1,3,4,3,2)
orange = c(2,4,5,5,5)
banana = c(3,3,1,1,1)
grape = c(2,2,1,2,3)
# 빈 화면 만들기
plot(1, 1, type="n", xlim=c(0,5), ylim=c(0,6), xlab="", ylab="")
# 그래프 그리기
points(apple, pch=1, col="red")
lines(apple,lty=1, col="red")
points(orange, pch=4, col="orange")
lines(orange,lty=2, col="orange")
points(banana, pch=8, col="yellow")
lines(banana,lty=4, col="yellow")
points(grape, pch=9, col="purple")
lines(grape, lty=5, col="purple")
# 범례 만들기
labels <- c("apple","orange","banana","purple")
cols <- c("red", "orange", "yellow", "purple")
ltys <- c(1,2,4,5)
pchs <- c(1,4,8,9)
legend("topleft", legend=labels, col=cols, pch=pchs, lty=ltys, ncol=2)
source("D:/kim2/05_빅데이터분석/ch04/ex10.r")
# 필요한 패키지 로드
library(readxl)
library(ggplot2)
library(car)
# 엑셀 파일 읽기
file_path <- "05_MRI_FA_P.xlsx"
# 엑셀 파일 읽기
file_path <- "05_MRI_FA_P.xlsx"
data <- read_excel(file_path)
# 데이터 구조 확인
head(data)
summary(data)
# t-test 실행
t_test_result <- t.test(data$Pre_contrast, data$Post_contrast, paired = TRUE)
print(t_test_result)
# 필요한 패키지 로드
library(readxl)
library(ggplot2)
library(car)
# 엑셀 파일 읽기
file_path <- "05_MRI_FA_P.xlsx"
# 엑셀 파일 읽기
file_path <- "05_MRI_FA_P.xlsx"
data <- read_excel(file_path)
# 데이터 구조 확인
head(data)
summary(data)
# 데이터를 하나로 묶고 그룹 변수를 만듭니다.
long_data <- data.frame(
value = c(data$Pre_contrast, data$Post_contrast),
group = factor(rep(c("Pre", "Post"), each = nrow(data)))
)
# ANOVA 실행
anova_result <- aov(value ~ group, data = long_data)
summary(anova_result)
# Pre_contrast와 Post_contrast의 히스토그램
ggplot(data, aes(x = Pre_contrast)) +
geom_histogram(binwidth = 0.02, fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = Post_contrast), binwidth = 0.02, fill = "red", alpha = 0.5) +
labs(title = "Histogram of Pre_contrast and Post_contrast", x = "Value", y = "Count") +
theme_minimal()
# 박스플롯 그리기
ggplot(long_data, aes(x = group, y = value, fill = group)) +
geom_boxplot() +
labs(title = "Pre_contrast vs Post_contrast", x = "Group", y = "Value") +
theme_minimal()
library(readxl)
evmile<-read_xls("03_evrange_p.xlsx")
evmile<-read_xls("03_evrange_p.xlsx")
evmile<-read_xls("03_evrange_p.xlsx")
View(evmile)
evmile <- read_xls("03_evrange_p.xlsx")
library(openxlsx)
evmile <- read.xlsx("03_evrange_p.xlsx")
View(evmile)
shapiro.test(evmile$Range)
t.test(evmile$Range, mu=200)
t.test(evmile$Range, mu=200, alternative="two.sided")
t.test(evmile$Range, mu=200, alternative="greater")
t.test(evmile$Range, mu=200, alternative="less")
library(openxlsx)
data <- read.xlsx("03_evrange_p.xlsx")
View(data)
wilcox.test(data$Range, mu=200, correct=FALSE)
wilcox.test(data$Range, mu=200, correct=FALSE, alternative="two.sided")
wilcox.test(data$Range, mu=200, correct=FALSE, alternative="greater")
wilcox.test(data$Range, mu=200, correct=FALSE, alternative="less")
# Equal variances assumed = t-test
t.test(evmile$Range~evmile$Model, var.equal=TRUE)
# Equal variances NOT assumed = welch’s t-test
t.test(evmile$Range~evmil$Model, var.equal=FALSE)
# Equal variances NOT assumed = welch’s t-test
t.test(evmile$Range~evmil$Model, var.equal=FALSE)
# Equal variances NOT assumed = welch’s t-test
t.test(evmile$Range~evmile$Model, var.equal=FALSE)
# Paired samples t-test
t.test(data$Pre_contrast, data$Post_contrast, paired=T)
## or can utilise one-sample t-test
t.test(diff)
t.test(diff, mu=0)
# 엑셀 파일 읽기
file_path <- "05_MRI_FA_P.xlsx"
data <- read_excel(file_path)
# Paired samples t-test
t.test(data$Pre_contrast, data$Post_contrast, paired=T)
## or can utilise one-sample t-test
t.test(diff)
t.test(diff, mu=0)
ev1 < subset(evmile, Model==1)
ev1 <- subset(evmile, Model==1)
ev2 <- subset(evmile, Model==2)
shapiro.test(ev1$Range)
shapiro.test(ev2$Range)
install.packages(car)
install.packages("car")
library(car)
leveneTest(evmile$Range, evmile$Model)
t.test(evmile$Range ~ evmile$Model)
t.test(Range - Model, evmile)
t.test(Range - Model, evmile)
t.test(Range ~ Model, evmile)
ev1 <- subset(evmile, Model==1)
ev2 <- subset(evmile, Model==2)
shapiro.test(ev1$Range)
library(readxl)
library(ggplot2)
library(car)
# 엑셀 파일 읽기
file_path <- "06_ANOVA_EX_DATA.xlsx"
data <- read_excel(file_path)
data
rr <- read_excel(file_path)
rr
aov(Value~Group, data=rr)
ano1<-aov(Value~Group, data=rr)
summary(ano1)
install.packages("DescTools")
PostHocTest(ano1, method="hsd")
library(PostHocTest)
PostHocTest(ano1, method="duncan")
PostHocTest(ano1, method="scheffe")
PostHocTest(ano1, method="bonferroni")
DunnettTest(dr$Value,dr$Group)
install.packages("DescTools")
library(DescTools)
PostHocTest(ano1, method="hsd")
PostHocTest(ano1, method="duncan")
PostHocTest(ano1, method="scheffe")
PostHocTest(ano1, method="bonferroni")
DunnettTest(dr$Value,dr$Group)
DunnettTest(rr$Value,rr$Group)
# Post-hoc Test (2) : Using rstatix
install.packages("rstatix")
library(rstatix)
tukey_hsd(rr,Value~Group, conf.level=0.05) #conf.level = can be omitted
games_howell_test(rr,Value~Group)
tukey_hsd(rr,Value~Group, conf.level=0.05) #conf.level = can be omitted
games_howell_test(rr,Value~Group)
View(AM)
set("D:\\kim2\\rLang_basic")
setwd("D:\\kim2\\rLang_basic")
setwd("D:\\kim2\\rLang_basic")
